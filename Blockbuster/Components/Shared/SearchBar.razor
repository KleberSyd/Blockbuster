@using System.Timers
@typeparam TItem

<div class="search-bar input-group input-group-lg">
    <span class="input-group-text" id="inputGroup-sizing-lg">Large</span>
    <input @bind="SearchText" @oninput="HandleInput" class="form-control" placeholder="Search movies..." list="datalistOptions" />
    @if (Suggestions.Any())
    {
        <ul class="suggestions-list">
            @foreach (var suggestion in Suggestions)
            {
                <li @onclick="() => SelectSuggestion(suggestion)">
                    @suggestion
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    [Parameter]
    public Func<string, Task<IEnumerable<TItem>>> FetchSuggestions { get; set; }

    private Timer debounceTimer;
    private string searchText = string.Empty;
    private IEnumerable<TItem> Suggestions { get; set; } = new List<TItem>();

    public string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            debounceTimer.Stop();
            debounceTimer.Start();
        }
    }

    protected override void OnInitialized()
    {
        debounceTimer = new Timer(500);
        debounceTimer.Elapsed += async (sender, args) =>
        {
            if (SearchText.Length >= 3)
            {
                Suggestions = await FetchSuggestions.Invoke(SearchText);
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                Suggestions = new List<TItem>();
                await InvokeAsync(StateHasChanged);
            }
        };
        debounceTimer.AutoReset = false;
    }

    private void HandleInput(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString() ?? string.Empty;
    }

    private async Task SelectSuggestion(TItem suggestion)
    {
        SearchText = suggestion.ToString();
        Suggestions = new List<TItem>();
        await OnSearch.InvokeAsync(SearchText);
        searchText = string.Empty;
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}
